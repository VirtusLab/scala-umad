umad: {
  shouldThrowExceptions: false
  shouldPrintStackTrace: true
  intervalMs: 60000
  verbose: false
  monitor: {
    enabled: true
    includes: [
      {
        class: "scala\\.(reflect|tools)\\..*"
        method: ".*_\\$eq"
      },
      {
        class: "scala\\.collection\\.mutable\\..*"
        method: ".*"
        onlyPublicMethods: true
        ifCalledFrom: "scala\\.(reflect|tools)\\..*"
      },
      {
        class: "scala\\.Array"
        method: ".*"
        onlyPublicMethods: true
        ifCalledFrom: "scala\\.(reflect|tools)\\..*"
      },
      {
        class: "java\\.util\\..*"
        method: ".*"
        onlyPublicMethods: true
        ifCalledFrom: "scala\\.(reflect|tools)\\..*"
      }
    ]
    excludes: [
      // Exclude constructors
      {
        class: "scala\\.collection\\.mutable\\..*\\$"
        method: "apply"
      },
      // Fixed by enabling `Names.synchronizeNames`
      {
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "nc_\\$eq"
      },
      // Fixed by introducing WorkerThreadLocal but too complicated to be autodetect
      {
        class: "scala\\.tools\\.nsc\\.Global"
        method: "reporter_\\$eq"
      }, // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
      {
        class: "scala\\.reflect\\.internal\\.SymbolTable$perRunCaches\\$"
        method: "caches_\\$eq"
      },
      { // Var on traits get coverted into messy method calls chains - maybe we need to look at it at some poitn
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "scopeCount_\\$eq"
      },
      { // Synchronization should be detected in _= method
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "infoTransformers_\\$eq"
      },
      { // Synchronization should be detected in _= method
        class: "scala\\.reflect\\.internal\\.SymbolTable"
        method: "_infoTransformers_\\$eq"
      },
    ],
    safeIndicators: [
      {
        clazz: "scala.reflect.internal.util.Parallel$WorkerOrMainThreadLocal",
        methods: [
          "set(Ljava/lang/Object;)V",
          "get()Ljava/lang/Object;"
        ]
      },
      {
        clazz: "scala.reflect.internal.util.Parallel$WorkerThreadLocal",
        methods: [
          "set(Ljava/lang/Object;)V",
          "get()Ljava/lang/Object;"
        ]
      },
      {
        clazz: "scala.reflect.internal.util.Parallel$AnyThreadLocal",
        methods: [
          "set(Ljava/lang/Object;)V",
          "get()Ljava/lang/Object;"
        ]
      },
      {
        clazz: "scala.reflect.internal.util.Parallel$Counter",
        methods: [
          "set(I)I",
          "get()I"
        ]
      },
      {
        clazz: "java.lang.ThreadLocal",
        methods: [
          "set(Ljava/lang/Object;)V",
          "get()Ljava/lang/Object;"
        ]
      }
    ],
    "synchronizeIndicators" : [
      "scala.reflect.internal.SymbolTable$synchronizeSymbolsAccess$.apply"
    ]
  }

  chaos: {
    enabled: false
    sleepTime: 100
    sleepThreshold: 100
    methodPercent: 10
    includes: [
      {
        class: ".*\\.Trees\\$Tree.*"
        method: ".*"
      },
      {
        class: ".*Parsers\\$Parser"
        method: ".*"
      }
    ]
    excludes: []
  }
}
